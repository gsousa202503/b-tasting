/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutTastersRouteImport } from './routes/_layout/tasters'
import { Route as LayoutSettingsRouteImport } from './routes/_layout/settings'
import { Route as LayoutSessionsRouteImport } from './routes/_layout/sessions'
import { Route as LayoutSamplesRouteImport } from './routes/_layout/samples'
import { Route as LayoutReportsRouteImport } from './routes/_layout/reports'
import { Route as LayoutProductsRouteImport } from './routes/_layout/products'
import { Route as LayoutOrderingRulesRouteImport } from './routes/_layout/ordering-rules'
import { Route as LayoutOrderingRouteImport } from './routes/_layout/ordering'
import { Route as LayoutMonitoringRouteImport } from './routes/_layout/monitoring'
import { Route as LayoutSessionSessionIdTastingRouteImport } from './routes/_layout/session.$sessionId.tasting'
import { Route as LayoutSessionSessionIdEvaluationRouteImport } from './routes/_layout/session.$sessionId.evaluation'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutTastersRoute = LayoutTastersRouteImport.update({
  id: '/tasters',
  path: '/tasters',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSettingsRoute = LayoutSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSessionsRoute = LayoutSessionsRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSamplesRoute = LayoutSamplesRouteImport.update({
  id: '/samples',
  path: '/samples',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutReportsRoute = LayoutReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutProductsRoute = LayoutProductsRouteImport.update({
  id: '/products',
  path: '/products',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutOrderingRulesRoute = LayoutOrderingRulesRouteImport.update({
  id: '/ordering-rules',
  path: '/ordering-rules',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutOrderingRoute = LayoutOrderingRouteImport.update({
  id: '/ordering',
  path: '/ordering',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutMonitoringRoute = LayoutMonitoringRouteImport.update({
  id: '/monitoring',
  path: '/monitoring',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutSessionSessionIdTastingRoute =
  LayoutSessionSessionIdTastingRouteImport.update({
    id: '/session/$sessionId/tasting',
    path: '/session/$sessionId/tasting',
    getParentRoute: () => LayoutRoute,
  } as any)
const LayoutSessionSessionIdEvaluationRoute =
  LayoutSessionSessionIdEvaluationRouteImport.update({
    id: '/session/$sessionId/evaluation',
    path: '/session/$sessionId/evaluation',
    getParentRoute: () => LayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/monitoring': typeof LayoutMonitoringRoute
  '/ordering': typeof LayoutOrderingRoute
  '/ordering-rules': typeof LayoutOrderingRulesRoute
  '/products': typeof LayoutProductsRoute
  '/reports': typeof LayoutReportsRoute
  '/samples': typeof LayoutSamplesRoute
  '/sessions': typeof LayoutSessionsRoute
  '/settings': typeof LayoutSettingsRoute
  '/tasters': typeof LayoutTastersRoute
  '/': typeof LayoutIndexRoute
  '/session/$sessionId/evaluation': typeof LayoutSessionSessionIdEvaluationRoute
  '/session/$sessionId/tasting': typeof LayoutSessionSessionIdTastingRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/monitoring': typeof LayoutMonitoringRoute
  '/ordering': typeof LayoutOrderingRoute
  '/ordering-rules': typeof LayoutOrderingRulesRoute
  '/products': typeof LayoutProductsRoute
  '/reports': typeof LayoutReportsRoute
  '/samples': typeof LayoutSamplesRoute
  '/sessions': typeof LayoutSessionsRoute
  '/settings': typeof LayoutSettingsRoute
  '/tasters': typeof LayoutTastersRoute
  '/': typeof LayoutIndexRoute
  '/session/$sessionId/evaluation': typeof LayoutSessionSessionIdEvaluationRoute
  '/session/$sessionId/tasting': typeof LayoutSessionSessionIdTastingRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/monitoring': typeof LayoutMonitoringRoute
  '/_layout/ordering': typeof LayoutOrderingRoute
  '/_layout/ordering-rules': typeof LayoutOrderingRulesRoute
  '/_layout/products': typeof LayoutProductsRoute
  '/_layout/reports': typeof LayoutReportsRoute
  '/_layout/samples': typeof LayoutSamplesRoute
  '/_layout/sessions': typeof LayoutSessionsRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/tasters': typeof LayoutTastersRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/session/$sessionId/evaluation': typeof LayoutSessionSessionIdEvaluationRoute
  '/_layout/session/$sessionId/tasting': typeof LayoutSessionSessionIdTastingRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/monitoring'
    | '/ordering'
    | '/ordering-rules'
    | '/products'
    | '/reports'
    | '/samples'
    | '/sessions'
    | '/settings'
    | '/tasters'
    | '/'
    | '/session/$sessionId/evaluation'
    | '/session/$sessionId/tasting'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/monitoring'
    | '/ordering'
    | '/ordering-rules'
    | '/products'
    | '/reports'
    | '/samples'
    | '/sessions'
    | '/settings'
    | '/tasters'
    | '/'
    | '/session/$sessionId/evaluation'
    | '/session/$sessionId/tasting'
  id:
    | '__root__'
    | '/_layout'
    | '/login'
    | '/_layout/monitoring'
    | '/_layout/ordering'
    | '/_layout/ordering-rules'
    | '/_layout/products'
    | '/_layout/reports'
    | '/_layout/samples'
    | '/_layout/sessions'
    | '/_layout/settings'
    | '/_layout/tasters'
    | '/_layout/'
    | '/_layout/session/$sessionId/evaluation'
    | '/_layout/session/$sessionId/tasting'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/tasters': {
      id: '/_layout/tasters'
      path: '/tasters'
      fullPath: '/tasters'
      preLoaderRoute: typeof LayoutTastersRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/sessions': {
      id: '/_layout/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof LayoutSessionsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/samples': {
      id: '/_layout/samples'
      path: '/samples'
      fullPath: '/samples'
      preLoaderRoute: typeof LayoutSamplesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/reports': {
      id: '/_layout/reports'
      path: '/reports'
      fullPath: '/reports'
      preLoaderRoute: typeof LayoutReportsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/products': {
      id: '/_layout/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof LayoutProductsRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/ordering-rules': {
      id: '/_layout/ordering-rules'
      path: '/ordering-rules'
      fullPath: '/ordering-rules'
      preLoaderRoute: typeof LayoutOrderingRulesRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/ordering': {
      id: '/_layout/ordering'
      path: '/ordering'
      fullPath: '/ordering'
      preLoaderRoute: typeof LayoutOrderingRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/monitoring': {
      id: '/_layout/monitoring'
      path: '/monitoring'
      fullPath: '/monitoring'
      preLoaderRoute: typeof LayoutMonitoringRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/session/$sessionId/tasting': {
      id: '/_layout/session/$sessionId/tasting'
      path: '/session/$sessionId/tasting'
      fullPath: '/session/$sessionId/tasting'
      preLoaderRoute: typeof LayoutSessionSessionIdTastingRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/session/$sessionId/evaluation': {
      id: '/_layout/session/$sessionId/evaluation'
      path: '/session/$sessionId/evaluation'
      fullPath: '/session/$sessionId/evaluation'
      preLoaderRoute: typeof LayoutSessionSessionIdEvaluationRouteImport
      parentRoute: typeof LayoutRoute
    }
  }
}

interface LayoutRouteChildren {
  LayoutMonitoringRoute: typeof LayoutMonitoringRoute
  LayoutOrderingRoute: typeof LayoutOrderingRoute
  LayoutOrderingRulesRoute: typeof LayoutOrderingRulesRoute
  LayoutProductsRoute: typeof LayoutProductsRoute
  LayoutReportsRoute: typeof LayoutReportsRoute
  LayoutSamplesRoute: typeof LayoutSamplesRoute
  LayoutSessionsRoute: typeof LayoutSessionsRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutTastersRoute: typeof LayoutTastersRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutSessionSessionIdEvaluationRoute: typeof LayoutSessionSessionIdEvaluationRoute
  LayoutSessionSessionIdTastingRoute: typeof LayoutSessionSessionIdTastingRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutMonitoringRoute: LayoutMonitoringRoute,
  LayoutOrderingRoute: LayoutOrderingRoute,
  LayoutOrderingRulesRoute: LayoutOrderingRulesRoute,
  LayoutProductsRoute: LayoutProductsRoute,
  LayoutReportsRoute: LayoutReportsRoute,
  LayoutSamplesRoute: LayoutSamplesRoute,
  LayoutSessionsRoute: LayoutSessionsRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutTastersRoute: LayoutTastersRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutSessionSessionIdEvaluationRoute: LayoutSessionSessionIdEvaluationRoute,
  LayoutSessionSessionIdTastingRoute: LayoutSessionSessionIdTastingRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
